import OpenAI from 'openai';

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: import.meta.env.VITE_OPENAI_API_KEY,
  dangerouslyAllowBrowser: true // Note: In production, use backend for security
});

export const generateSummary = async (transcript, language = "English") => {
  try {
    // Create the prompt based on language
    const systemPrompt = language === "Bengali" 
      ? "‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ï‡¶ú‡¶® ‡¶¨‡¶ø‡¶∂‡ßá‡¶∑‡¶ú‡ßç‡¶û ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶ï‡•§ YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü, ‡¶∏‡¶Ç‡¶ó‡¶†‡¶ø‡¶§ ‡¶è‡¶¨‡¶Ç ‡¶¨‡ßã‡¶ß‡¶ó‡¶Æ‡ßç‡¶Ø ‡¶®‡ßã‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®‡•§ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®‡•§"
      : "You are an expert educator. Create clear, organized, and comprehensive notes from YouTube video transcripts.";

    const userPrompt = language === "Bengali"
      ? `‡¶®‡¶ø‡¶Æ‡ßç‡¶®‡¶≤‡¶ø‡¶ñ‡¶ø‡¶§ YouTube ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ü‡ßç‡¶∞‡¶æ‡¶®‡ßç‡¶∏‡¶ï‡ßç‡¶∞‡¶ø‡¶™‡ßç‡¶ü ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶∂‡¶ø‡¶ï‡ßç‡¶∑‡¶æ‡¶Æ‡ßÇ‡¶≤‡¶ï ‡¶®‡ßã‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡ßÅ‡¶®:

${transcript}

‡¶®‡ßã‡¶ü‡¶ü‡¶ø ‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶Ö‡¶®‡ßç‡¶§‡¶∞‡ßç‡¶≠‡ßÅ‡¶ï‡ßç‡¶§ ‡¶ï‡¶∞‡¶¨‡ßá:
- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡ßç‡¶™‡¶∑‡ßç‡¶ü ‡¶∂‡¶ø‡¶∞‡ßã‡¶®‡¶æ‡¶Æ
- ‡¶Æ‡ßÇ‡¶≤ ‡¶¨‡¶ø‡¶∑‡¶Ø‡¶º‡¶ó‡ßÅ‡¶≤‡¶ø‡¶∞ ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶¨‡¶ø‡¶¨‡¶∞‡¶£
- ‡¶¨‡ßÅ‡¶≤‡ßá‡¶ü ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡ßá ‡¶¨‡¶ø‡¶∏‡ßç‡¶§‡¶æ‡¶∞‡¶ø‡¶§ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ñ‡ßç‡¶Ø‡¶æ
- ‡¶ó‡ßÅ‡¶∞‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶™‡¶Ø‡¶º‡ßá‡¶®‡ßç‡¶ü‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü ‡¶ï‡¶∞‡ßÅ‡¶®
- ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ ‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞‡¶ø‡¶ï ‡¶™‡ßç‡¶∞‡¶Ø‡¶º‡ßã‡¶ó (‡¶Ø‡¶¶‡¶ø ‡¶•‡¶æ‡¶ï‡ßá)
- ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ï‡ßç‡¶∑‡¶ø‡¶™‡ßç‡¶§ ‡¶∏‡¶æ‡¶∞‡¶æ‡¶Ç‡¶∂

Markdown ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶Ø‡¶º ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®‡•§`
      : `Create a comprehensive and well-structured educational note from the following YouTube video transcript:

${transcript}

Please format the note with these sections:

# [Clear, Descriptive Title]

## üìù Executive Summary
A 2-3 sentence overview of what this video covers and its main purpose.

## üéØ Learning Objectives
What viewers will learn or understand after watching this video (use bullet points).

## üìö Core Concepts

### [Main Topic 1]
- **Key Point:** Detailed explanation with examples
- **Important Detail:** Supporting information
- **Example:** Real-world application or code example (use \`backticks\` for code/technical terms)

### [Main Topic 2]
- **Key Point:** Detailed explanation with examples  
- **Important Detail:** Supporting information
- **Example:** Real-world application or code example (use \`backticks\` for code/technical terms)

(Continue for all major topics covered)

## üí° Key Insights & Takeaways
- Most important insights in numbered or bulleted format
- Critical points that viewers should remember
- Actionable advice or recommendations

## üîó Practical Applications
How this knowledge can be applied in real scenarios or projects (use bullet points).

## üìä Summary
A concise recap of the main points covered in 2-3 sentences.

## üéì Study Tips
Suggestions for further learning or practice related to this topic (use bullet points).

**CRITICAL FORMATTING REQUIREMENTS:**
- Use \`backticks\` around ALL technical terms, code snippets, class names, function names, etc.
- Ensure proper spacing between sections (double line breaks)
- Use bullet points consistently for lists
- Make headers descriptive, not generic (e.g., "CSS Utility Classes" not "Main Topic 1")
- Keep paragraphs concise and scannable
- Use **bold** for emphasis on key terms
- Include emojis in section headers for visual appeal
- Ensure logical flow and clear hierarchy`;

    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ],
      max_tokens: 3000,
      temperature: 0.3,
    });

    const summary = response.choices[0]?.message?.content;
    
    if (!summary) {
      throw new Error("Failed to generate summary from OpenAI");
    }

    return summary;
  } catch (error) {
    console.error("Error generating summary:", error);
    
    // Provide specific error messages for production
    if (error.message?.includes('rate limit')) {
      throw new Error("OpenAI API rate limit exceeded. Please try again in a few minutes.");
    } else if (error.message?.includes('quota')) {
      throw new Error("OpenAI API quota exceeded. Please contact support.");
    } else if (error.message?.includes('invalid_api_key')) {
      throw new Error("Invalid OpenAI API key. Please check configuration.");
    } else {
      throw new Error(`Failed to generate summary: ${error.message}`);
    }
  }
};
